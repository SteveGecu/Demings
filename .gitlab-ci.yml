stages: # List of stages for jobs, and their order of execution
  - testSuite
  - .post

variables:
  ENVIRONMENT:
    default: qa-stressTest
    description: 'The environment variable file (without extension) to use for this test'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
      when: always

.configure-environment: &configure-environment
  - |
    envFile="./environments/${ENVIRONMENT}.env"
    if [[ ! -f "$envFile" ]]; then
      echo "ERROR: ${envFile} does not exist"
      exit 1
    fi

    # remove .env from to avoid conflict
    rm ./.env

    echo "Loading ${envFile} environment"
    # load environment variables from file, ignore commented (#) lines
    export $(grep -v '^#' $envFile | xargs)

    # create kafka configuration file
    echo 'creating ~/.config directory to house kafka config file'
    mkdir ~/.config

    echo "Writing kafka config to ~/.config/kafkacat${ENVIRONMENT}.conf"
    echo "bootstrap.servers=${BOOTSTRAPSERVERS}" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "security.protocol=SASL_SSL" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "sasl.mechanisms=${SASLMECHANISMS}" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "sasl.username=${SASLUSERNAME}" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "sasl.password=${SASLPASSWORD}" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "enable.ssl.certificate.verification=false" >> ~/.config/kafkacat${ENVIRONMENT}.conf

.slack-test-results: &slack-test-results
  - |
    lastExitCode=$?
    testCount=$(xmllint --xpath "string(//testsuites/@tests)" junit.xml)
    errorCount=$(xmllint --xpath "string(//testsuites/@errors)" junit.xml)
    failureCount=$(xmllint --xpath "string(//testsuites/@failures)" junit.xml)
    problemCount=$(($errorCount + $failureCount))
    execTime=$(xmllint --xpath "string(//testsuites/@time)" junit.xml)

    if [[ $lastExitCode = 0 && $problemCount = 0 ]]; then
      result='Succeeded'
      emoji=':tada:'
    else
      result='Failed'
      emoji=':skull_and_crossbones:'
    fi

    details=$(awk 1 ORS='\\n' junit.xml)
    details=$(echo $details | sed "s/\"/'/g")
    time=$(date +%s)

    body=$(cat  << EOF
    {
      "blocks": [
        {
          "type": "header",
          "text": {
            "type": "plain_text",
            "text": "${TEST_NAME} Test Automation"
          }
        },
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Overall Status:*\n${emoji} ${result}"
            },
            {
              "type": "mrkdwn",
              "text": "*Environment:*\n${ENVIRONMENT}"
            }
          ]
        },
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Test Summary:*\n<https://gitlab.com/spacee/deming/rovr-proj/gateway/test-suite-automation/-/pipelines/${CI_PIPELINE_ID}/test_report|${CI_PIPELINE_ID}>"
            },
            {
              "type": "mrkdwn",
              "text": "*Execution Time:*\n${execTime} sec"
            }
          ]
        },
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Total Tests:*\n${testCount}"
            },
            {
              "type": "mrkdwn",
              "text": "*Errors:*\n${problemCount}"
            }
          ]
        }
      ]
    }
    EOF
    )

    curl --data-urlencode "payload=$body" ${SLACK_WEBHOOK_URL}

.slack-pipeline-failure: &slack-pipeline-failure
  - |
    if [[ $CI_JOB_STATUS = 'failed' ]]; then

      body=$(cat  << EOF
      {
        "blocks": [
          {
            "type": "header",
            "text": {
              "type": "plain_text",
              "text": "${ENVIRONMENT} Deming Test Suite Automation Pipeline Failure"
            }
          },
          {
            "type": "section",
            "fields": [
              {
                "type": "mrkdwn",
                "text": "*Details:*\n<https://gitlab.com/spacee/deming/rovr-proj/gateway/test-suite-automation/-/pipelines/${CI_PIPELINE_ID}|${CI_PIPELINE_ID}>"
              }
            ]
          }
        ]
      }
    EOF
      )

      curl --data-urlencode "payload=$body" ${SLACK_WEBHOOK_URL}
    fi

qaRovrTest:
  stage: testSuite
  rules:
    - if: $ENVIRONMENT == 'qa-stressTest'
      when: always
    - when: never
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:latest
  tags:
    - deming-rovr-gateway-qa-stress-test
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
  script:
    - *configure-environment
    - npm install
    - npm run RovrTests || true
  after_script:
    - export TEST_NAME='ROVR'
    - *slack-test-results

qaObservrTest:
  stage: testSuite
  rules:
    - if: $ENVIRONMENT == 'qa-stressTest'
      when: always
    - when: never
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:latest
  tags:
    - deming-rovr-gateway-qa-stress-test
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
  script:
    - *configure-environment
    - npm install
    - npm run ObservrTests || true
  after_script:
    - export TEST_NAME='OBSERVR'
    - *slack-test-results

bunningsRovrTest:
  stage: testSuite
  rules:
    - if: $ENVIRONMENT == 'bunnings'
      when: always
    - when: never
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:latest
  tags:
    - deming-rovr-gateway-prod
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
  script:
    - *configure-environment
    - npm install
    - npm run RovrTests || true
  after_script:
    - export TEST_NAME='OBSERVR'
    # - *slack-test-results
