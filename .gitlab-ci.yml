stages: # List of stages for jobs, and their order of execution
  - testSuite
  - docker-build
  - tag
  - version
  - .post

variables:
  ENVIRONMENT:
    value: build
    description: 'The environment variable file (without extension) to use for this test'

# workflow:
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web"
#       when: always


.configure-environment: &configure-environment
  - |
    envFile="./environments/${ENVIRONMENT}.env"
    if [[ ! -f "$envFile" ]]; then
      echo "ERROR: ${envFile} does not exist"
      exit 1
    fi

    # remove .env from to avoid conflict
    rm ./.env

    echo "Loading ${envFile} environment"
    # load environment variables from file, ignore commented (#) lines
    export $(grep -v '^#' $envFile | xargs)

    # create kafka configuration file
    echo 'creating ~/.config directory to house kafka config file'
    mkdir ~/.config

    echo "Writing kafka config to ~/.config/kafkacat${ENVIRONMENT}.conf"
    echo "bootstrap.servers=${BOOTSTRAPSERVERS}" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "security.protocol=SASL_SSL" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "sasl.mechanisms=${SASLMECHANISMS}" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "sasl.username=${SASLUSERNAME}" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "sasl.password=${SASLPASSWORD}" >> ~/.config/kafkacat${ENVIRONMENT}.conf
    echo "enable.ssl.certificate.verification=false" >> ~/.config/kafkacat${ENVIRONMENT}.conf

.slack-test-results: &slack-test-results
  - |
    lastExitCode=$?
    testCount=$(xmllint --xpath "string(//testsuites/@tests)" junit.xml)
    errorCount=$(xmllint --xpath "string(//testsuites/@errors)" junit.xml)
    failureCount=$(xmllint --xpath "string(//testsuites/@failures)" junit.xml)
    problemCount=$(($errorCount + $failureCount))
    execTime=$(xmllint --xpath "string(//testsuites/@time)" junit.xml)

    if [[ $lastExitCode = 0 && $problemCount = 0 ]]; then
      result='Succeeded'
      emoji=':tada:'
    else
      result='Failed'
      emoji=':skull_and_crossbones:'
    fi

    body=$(cat  << EOF
    {
      "blocks": [
        {
          "type": "header",
          "text": {
            "type": "plain_text",
            "text": "${TEST_NAME} Test Automation"
          }
        },
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Overall Status:*\n${emoji} ${result}"
            },
            {
              "type": "mrkdwn",
              "text": "*Environment:*\n${ENVIRONMENT}"
            }
          ]
        },
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Test Summary:*\n<https://gitlab.com/spacee/deming/rovr-proj/gateway/test-suite-automation/-/pipelines/${CI_PIPELINE_ID}/test_report|${CI_PIPELINE_ID}>"
            },
            {
              "type": "mrkdwn",
              "text": "*Execution Time:*\n${execTime} sec"
            }
          ]
        },
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Total Tests:*\n${testCount}"
            },
            {
              "type": "mrkdwn",
              "text": "*Errors:*\n${problemCount}"
            }
          ]
        }
      ]
    }
    EOF
    )

    curl --data-urlencode "payload=$body" ${SLACK_WEBHOOK_URL}

qaRovrTest:
  stage: testSuite
  rules:
    - if: $ENVIRONMENT == 'qa-stressTest' && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")
      when: always
    - when: never
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:latest
  tags:
    - deming-rovr-gateway-qa-stress-test
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
  script:
    - *configure-environment
    - npm install
    - npm run RovrTests || true
  after_script:
    - export TEST_NAME='ROVR'
    - *slack-test-results

qaObservrTest:
  stage: testSuite
  rules:
    - if: $ENVIRONMENT == 'qa-stressTest' && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")
      when: always
    - when: never
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:latest
  tags:
    - deming-rovr-gateway-qa-stress-test
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
  script:
    - *configure-environment
    - npm install
    - npm run ObservrTests || true
  after_script:
    - export TEST_NAME='OBSERVR'
    - *slack-test-results

qaRangrTest:
  stage: testSuite
  rules:
    - if: $ENVIRONMENT == 'qa-stressTest' && ($CI_PIPELINE_SOURCE == "schedule" || $CI_PIPELINE_SOURCE == "web")
      when: always
    - when: never
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:latest
  tags:
    - deming-rovr-gateway-qa-stress-test
  artifacts:
    when: always
    reports:
      junit:
        - junit.xml
  script:
    - *configure-environment
    - npm install
    - npm run RangrTests || true
  after_script:
    - export TEST_NAME='RANGR'
    - *slack-test-results

# \/ \/ \/ Build steps for orchestration container \/ \/ \/

.version: &version
  - git switch $CI_COMMIT_BRANCH
  - git fetch origin
  - git reset --hard origin/$CI_COMMIT_BRANCH
  - |
    versionString=`grep -E '^VERSION *= *\d+\.\d+\.\d+$' Makefile`
    if [[ ! -z "$versionString" ]]; then
      regex=' *([0-9]+)\.([0-9]+)\.([0-9]+)$'
      [[ $versionString =~ $regex ]]
      major="${BASH_REMATCH[1]}"
      minor="${BASH_REMATCH[2]}"
      patch="${BASH_REMATCH[3]}"
      if [ ! -z "$major" ] || [ ! -z "$minor" ] || [ ! -z "$patch" ]; then
        echo "Starting Version: $major.$minor.$patch"
        case $UPDATE_TYPE in
          major)
            major=$((major+1))
            minor=0
            patch=0
            ;;
          minor)
            minor=$((minor+1))
            patch=0
            ;;
          patch)
            patch=$((patch+1))
            ;;
          *)
            printf "\e[0;31mERROR: UPDATE_TYPE must be either major, minor, or patch\e[0m\n"
            exit 1
        esac
        echo "Updated Version: $major.$minor.$patch"
        if sed -ri "s/^VERSION *= *[0-9]+\.[0-9]+\.[0-9]+$/VERSION = $major.$minor.$patch/" Makefile; then
          printf "\e[0;32mMakefile updated successfully\e[0m\n"
        else
          printf "\e[0;31mERROR: Unable to update Makefile\e[0m\n"
          exit 1
        fi;
      else
        printf "\e[0;31mERROR: Unable to extract major, minor, or patch digits from Makefile\e[0m\n"
        exit 1
      fi;
    else
      printf "\e[0;31mERROR: Version not found in Makefile\e[0m\n"
      exit 1
    fi;
    newVersion=`grep -E '^VERSION *= *\d+\.\d+\.\d+$' Makefile |awk '{print $3}'`
    git add Makefile
    git commit -m "[bump version] $newVersion $CI_COMMIT_SHORT_SHA"
    git tag $newVersion
    git push origin $newVersion
    git push origin $CI_COMMIT_BRANCH

.git-configure: &git-configure
  - mkdir -p ~/.ssh
  - echo "$GIT_SSH_PK" | base64 -d > ~/.ssh/id_rsa
  - chmod 400 ~/.ssh/id_rsa
  - cp ~/.ssh/id_rsa id_rsa
  - cp known_hosts ~/.ssh/known_hosts
  - git config --global user.name "$GITLAB_USER_NAME"
  - git config --global user.email "$GITLAB_USER_EMAIL"
  - git remote set-url origin git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git

.docker-variables: &docker-variables
  DOCKER_TLS_CERTDIR: '/certs'
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: '$DOCKER_TLS_CERTDIR/client'

docker-build:
  stage: docker-build
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:v0.0.17
  rules:
    - if: $CI_COMMIT_MESSAGE !~ /\[bump version\]/ && $CI_PIPELINE_SOURCE == "pushes"
      when: on_success
    - when: never
  tags:
    - spacee-org-docker
  services:
    - docker:19.03.14-dind
  variables:
    <<: *docker-variables
  script:
    - *git-configure
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - docker build -f Dockerfile --cache-from $CI_REGISTRY_IMAGE:latest . -t $CI_REGISTRY_IMAGE
    - docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - >
      if [[ "$CI_COMMIT_BRANCH" == "main" ]]; then
        docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:main;
        docker push $CI_REGISTRY_IMAGE:main;
      fi;
      if [[ ! -z "$CI_COMMIT_TAG" ]]; then
        docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:latest;
        docker push $CI_REGISTRY_IMAGE:latest;
        docker tag $CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG;
        docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG;
      fi;

tag:
  stage: tag
  rules:
    - if: $CI_COMMIT_TAG && $CI_COMMIT_MESSAGE =~ /^\[bump version\]/
      when: always
    - when: never
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:v0.0.17
  tags:
    - spacee-org-docker
  services:
    - docker:19.03.14-dind
  variables:
    <<: *docker-variables
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - SHA_TO_TAG=`echo $CI_COMMIT_MESSAGE | cut -d " " -f 4`
    - echo "Tagging docker version $SHA_TO_TAG to $CI_COMMIT_TAG"
    - docker pull $CI_REGISTRY_IMAGE:$SHA_TO_TAG
    - docker tag $CI_REGISTRY_IMAGE:$SHA_TO_TAG $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_TAG;

patch:
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:v0.0.17
  stage: version
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[bump version\]/i
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[patch\]/i
      when: on_success
    - when: manual
      allow_failure: true
  tags:
    - spacee-org-docker
  script:
    - UPDATE_TYPE=patch
    - *git-configure
    - *version

minor:
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:v0.0.17
  stage: version
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[bump version\]/i
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[minor\]/i
      when: on_success
    - when: manual
      allow_failure: true
  tags:
    - spacee-org-docker
  script:
    - UPDATE_TYPE=minor
    - *git-configure
    - *version

major:
  image: registry.gitlab.com/spacee/spacee-internal-services/spacee-node-ci:v0.0.17
  stage: version
  rules:
    - if: $CI_COMMIT_MESSAGE =~ /\[bump version\]/i
      when: never
    - if: $CI_COMMIT_MESSAGE =~ /\[major\]/i
      when: on_success
    - when: manual
      allow_failure: true
  tags:
    - spacee-org-docker
  script:
    - UPDATE_TYPE=major
    - *git-configure
    - *version